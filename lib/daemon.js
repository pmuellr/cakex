// Generated by CoffeeScript 1.9.0
var AllServers, child_process, daemon, killAll, serverAdd, serverRemove;

child_process = require("child_process");

daemon = exports;

AllServers = [];

process.on("exit", function() {
  return killAll();
});

process.on("beforeExit", function() {
  return killAll();
});

process.on("uncaughtException", function() {
  return killAll();
});

process.on("SIGINT", function() {
  return killAll();
});

process.on("SIGTERM", function() {
  return killAll();
});

process.on("SIGTBREAK", function() {
  return killAll();
});

process.on("uncaughtException", function(e) {
  log("uncaught exception: " + e);
  return log(e.stack);
});

daemon.start = function(pidFile, program, args, options) {
  if (options == null) {
    options = {};
  }
  daemon.kill(pidFile, function() {
    var serverProcess;
    if (options.stdio == null) {
      options.stdio = "inherit";
    }
    serverProcess = child_process.spawn(program, args, options);
    serverProcess.pid.toString().to(pidFile);
    return serverAdd(pidFile);
  });
};

daemon.kill = function(pidFile, cb) {
  var e, pid;
  serverRemove(pidFile);
  if (test("-f", pidFile)) {
    pid = cat(pidFile);
    pid = parseInt(pid, 10);
    rm(pidFile);
    try {
      process.kill(pid);
    } catch (_error) {
      e = _error;
    }
  }
  process.nextTick(function() {
    if (cb != null) {
      return cb();
    }
  });
};

serverAdd = function(pidFile) {
  return AllServers.push(pidFile);
};

serverRemove = function(pidFile) {
  var index;
  index = AllServers.indexOf(pidFile);
  if (index === -1) {
    return;
  }
  return AllServers.splice(index, 1);
};

killAll = function() {
  var pidFile, _i, _len, _ref, _results;
  _ref = AllServers.slice();
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    pidFile = _ref[_i];
    _results.push(daemon.kill(pidFile));
  }
  return _results;
};

//# sourceMappingURL=daemon.js.map
